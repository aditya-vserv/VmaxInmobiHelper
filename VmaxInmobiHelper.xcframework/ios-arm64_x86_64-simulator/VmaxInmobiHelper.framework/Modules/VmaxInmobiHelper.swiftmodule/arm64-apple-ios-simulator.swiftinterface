// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VmaxInmobiHelper
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import InMobiSDK
import Swift
import UIKit
import Vmax
@_exported import VmaxInmobiHelper
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VmaxAdInMobiBanner : ObjectiveC.NSObject, Vmax.VmaxAd {
  @objc deinit
  public func prepare(adResponse: Swift.String, delegate: Vmax.VmaxAdDelegate)
  public func render(container: UIKit.UIView)
  public static func getSignatures() -> [Swift.String]
  public func pause()
  public func resume()
  public func close()
}
extension VmaxInmobiHelper.VmaxAdInMobiBanner : Vmax.VmaxAdAssetDelegate {
  public func onPrepared<T>(asset: Vmax.VmaxAdAssetHelper, result: T)
  public func onPrepareFailed(asset: Vmax.VmaxAdAssetHelper, error: Vmax.VmaxError)
  public func onRendered<T>(asset: Vmax.VmaxAdAssetHelper, result: T)
  public func onRenderFailed(asset: Vmax.VmaxAdAssetHelper, error: Vmax.VmaxError)
  public func onClosed(asset: Vmax.VmaxAdAssetHelper)
  public func onClicked(asset: Vmax.VmaxAdAssetHelper)
  public func onClickedComplete(asset: Vmax.VmaxAdAssetHelper)
}
extension VmaxInmobiHelper.VmaxAdInMobiBanner : Vmax.VmaxNetworkAd {
  public func set(keywords: [Swift.String])
  public func set(customTargeting: [Swift.String : Swift.String])
}
extension VmaxInmobiHelper.VmaxAdInMobiBanner : Vmax.VmaxRefreshableAd {
  public func shouldProcessRefresh() -> Swift.Bool
}
extension VmaxInmobiHelper.VmaxAdInMobiBanner : Vmax.ViewPortManager {
  public func addObserverToScrollViews()
  public func removeObserverFromScrollViews()
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension VmaxInmobiHelper.VmaxAdInMobiBanner : Vmax.VmaxRefreshableAssetDelegate {
  public func onAdPaused()
  public func onAdResumed()
  public func onAdComplete()
}
final public class VmaxInMobiError : Vmax.VmaxError {
  public enum Codes : Swift.Int {
    case noFillError
    case timeoutError
    case networkError
    case internalError
    case serverError
    case invalidRequest
    case adAlreadyUsed
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(code: VmaxInmobiHelper.VmaxInMobiError.Codes)
  public init(code: VmaxInmobiHelper.VmaxInMobiError.Codes, errorDescription: Swift.String)
  public init(code: VmaxInmobiHelper.VmaxInMobiError.Codes, errorDescription: Swift.String, recoveryMessage: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VmaxAdInMobiNative : ObjectiveC.NSObject, Vmax.VmaxAd {
  @objc deinit
  public func prepare(adResponse: Swift.String, delegate: Vmax.VmaxAdDelegate)
  public func render(container: UIKit.UIView)
  public static func getSignatures() -> [Swift.String]
  public func pause()
  public func resume()
  public func close()
  public func set(layout: Vmax.VmaxLayout)
}
extension VmaxInmobiHelper.VmaxAdInMobiNative : Vmax.VmaxAdAssetDelegate {
  public func onPrepared<T>(asset: Vmax.VmaxAdAssetHelper, result: T)
  public func onPrepareFailed(asset: Vmax.VmaxAdAssetHelper, error: Vmax.VmaxError)
  public func onRendered<T>(asset: Vmax.VmaxAdAssetHelper, result: T)
  public func onRenderFailed(asset: Vmax.VmaxAdAssetHelper, error: Vmax.VmaxError)
  public func onClosed(asset: Vmax.VmaxAdAssetHelper)
  public func onClicked(asset: Vmax.VmaxAdAssetHelper)
  public func onClickedComplete(asset: Vmax.VmaxAdAssetHelper)
}
extension VmaxInmobiHelper.VmaxAdInMobiNative : Vmax.VmaxNetworkAd {
  public func set(keywords: [Swift.String])
  public func set(customTargeting: [Swift.String : Swift.String])
}
extension VmaxInmobiHelper.VmaxAdInMobiNative : Vmax.VmaxRefreshableAd {
  public func shouldProcessRefresh() -> Swift.Bool
}
extension VmaxInmobiHelper.VmaxAdInMobiNative : Vmax.ViewPortManager {
  public func addObserverToScrollViews()
  public func removeObserverFromScrollViews()
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension VmaxInmobiHelper.VmaxAdInMobiNative : Vmax.VmaxRefreshableAssetDelegate {
  public func onAdPaused()
  public func onAdResumed()
  public func onAdComplete()
}
public protocol VmaxInMobiLayout : Vmax.VmaxLayout {
  func getIcon() -> UIKit.UIImageView?
  func getTitle() -> UIKit.UILabel?
  func getMediaView() -> UIKit.UIView?
  func getCTA() -> UIKit.UIButton?
  func getAdChoices() -> UIKit.UIView?
  func setDescription(text: Swift.String?)
  func setDisplayUrl(text: Swift.String?)
}
extension VmaxInmobiHelper.VmaxInMobiLayout {
  public func getIcon() -> UIKit.UIImageView?
  public func getTitle() -> UIKit.UILabel?
  public func getMediaView() -> UIKit.UIView?
  public func getCTA() -> UIKit.UIButton?
  public func getAdChoices() -> UIKit.UIView?
  public func setDescription(text: Swift.String?)
  public func setDisplayUrl(text: Swift.String?)
}
extension VmaxInmobiHelper.VmaxInMobiError.Codes : Swift.Equatable {}
extension VmaxInmobiHelper.VmaxInMobiError.Codes : Swift.Hashable {}
extension VmaxInmobiHelper.VmaxInMobiError.Codes : Swift.RawRepresentable {}
